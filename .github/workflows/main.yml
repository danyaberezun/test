name: Trololo

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  myjob:
    runs-on: ubuntu-18.04
    steps:
    # Those steps are executed directly on the VM
    - name: Install
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update --fix-missing
        sudo apt-get install gcc-multilib
        sudo apt-get upgrade
    - name: Install  opam
      run: |
        sudo add-apt-repository ppa:avsm/ppa
        sudo apt update
        sudo apt install opam
    - name: opam init
      run: opam init -y
    - name: opam check
      run: |
        opam pin list
        opam --version
    - name: install ocaml
      run: |
        eval `opam env`
        opam switch create 4.10.0
        eval `opam env`
        which ocaml
        ocaml -version
    - name: install ostap
      run: opam pin add -y ostap https://github.com/dboulytchev/ostap.git#memoCPS
    - name: install lama
      run: opam pin add -y lama https://github.com/JetBrains-Research/Lama.git
    - name: check
      run: |
        opam pin list
        lamac -v
        
        
        


# name: Build Hello World executable
# on: [push, pull_request]
# jobs:
#   run:
#     name: Build
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest]
#         ocaml-version: ["4.08.1"]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2.0.0
#       - name: Use OCaml ${{ matrix.ocaml-version }}
#         uses: avsm/setup-ocaml@v1.0
#         with:
#           ocaml-version: ${{ matrix.ocaml-version }}
#       - run: opam pin add -n ostap https://github.com/dboulytchev/ostap.git#memoCPS
#       - run: opam pin add -y lama https://github.com/JetBrains-Research/Lama.git
#       - run: opam pin list
#       - run: lamac -v
# #       - run: opam pin add hello.dev -n .
# #       - run: opam depext -yt hello
# #       - run: opam install -t . --deps-only
# #       - run: opam exec -- dune build
# #       - run: opam exec -- dune runtest

# jobs:
#   myjob:
#     runs-on: ubuntu-latest
#     steps:
#     # Those steps are executed directly on the VM
#     - run: ls /
#     - run: echo $HOME
#     - name: Add a file
#       run: touch $HOME/stuff.txt
#     # Those steps are actions, which may run inside a container
#     - uses: docker://berezun/cw-2020:latest
#     - uses: actions/checkout@v1
# #    - uses: ./.github/actions/travis
#     - run: ls
#     - run: git clone https://github.com/dboulytchev/compiler-2020.git
#     - run: ls compiler-2020
#     - run: opam --version
#     - run: opam pin list
#     - run: |
#         cd compiler-2020
#         make

#   my_job2:
#     runs-on: ubuntu-latest
#     container:
#       image: berezun/cw-2020
#     steps:
#       - uses: actions/checkout@v1
#       - run: |
#           echo $(ls)
#           opam --version
#           eval $(opam env)
#           git clone https://github.com/dboulytchev/compiler-2020.git
#           make


# jobs:

# #   build:
# #     runs-on: ubuntu-latest
    
# #     steps:
# #       - name: Display the path
# #         run: echo $PATH
# #         shell: bash
# #       - uses: docker://berezun/cw-2020
#   build:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Display the path
#         run: ls
#       - name: test2
#         run: echo $(ls)
#       - name: t1
#         run: |
#           ls
#           echo $(ls)
#       - name: t2
#         run: |
#           ls
#           echo $(ls)
#         shell: bash
  
#   container:
#     runs-on: ubuntu-latest
#     container: berezun/cw-2020:latest
#     steps:
#       - run: |
#           echo This job does specify a container.
#           echo It runs in the container instead of the VM.
#       - run:  |
#           echo Llls.
#           ls
#           echo $(ls)
#           echo LllsEnd.
#       - run: |
#           eval $(opam env)
#           ocaml -v
#           opam pin list
#         name: Run in container
  
#   container2:
#     runs-on: ubuntu-latest
#     steps:
#       - run: docker run -d --name=SAMPLE_APP berezun/cw-2020:latest
    

# opam init -y
#          echo $(ls)
#          ls
#          ocamlc -v
#          opam pin list
#          make
#          opam init
#          opam update
#          opam upgrade
# eval `opam config env`
# cd /usr/share/compiler-2020


#     run:
#         docker pull berezun/cw-2020
#         docker run -d -it --name cw-2020 -v $(pwd):/usr/share/compiler-2020 berezun/cw-2020
#     script:
#         docker exec -it cw-2020 sh test.sh
# # This is a basic workflow to help you get started with Actions

# name: CI

# # Controls when the action will run. Triggers the workflow on push or pull request
# # events but only for the master branch
# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#     - uses: actions/checkout@v2

#     # Runs a single command using the runners shell
#     - name: Run a one-line script
#       run: echo Hello, world!

#     # Runs a set of commands using the runners shell
#     - name: Run a multi-line script
#       run: |
#         echo Add other actions to build,
#         echo test, and deploy your project.
